# Supervised Learning

## Decision Trees: Foundation

Decision trees are widely used supervised learning models that predict 
the value of a target variable by iteratively splitting the dataset 
based on decision rules derived from input features. The model 
functions as a piecewise constant approximation of the target 
function, producing clear, interpretable rules that are easily 
visualized and analyzed [@breiman1984classification]. Decision trees 
are fundamental in both classification and regression tasks, serving 
as the building blocks for more advanced ensemble models such as 
Random Forests and Gradient Boosting Machines.


### Algorithm Formulation


The core mechanism of a decision tree algorithm is the identification 
of optimal splits that partition the data into subsets that are 
increasingly homogeneous with respect to the target variable. At any 
node $m$, the data subset is denoted as $Q_m$ with a sample size of 
$n_m$. The objective is to find a candidate split $\theta$, defined 
as a threshold for a given feature, that minimizes an impurity or 
loss measure $H$.

When a split is made at node $m$, the data is divided into two 
subsets: $Q_{m,l}$ (left node) with sample size $n_{m,l}$, and 
$Q_{m,r}$ (right node) with sample size $n_{m,r}$. The split 
quality, measured by $G(Q_m, \theta)$, is given by:

$$
G(Q_m, \theta) = \frac{n_{m,l}}{n_m} H(Q_{m,l}(\theta)) + 
\frac{n_{m,r}}{n_m} H(Q_{m,r}(\theta)).
$$

The algorithm aims to identify the split that minimizes the impurity:

$$
\theta^* = \arg\min_{\theta} G(Q_m, \theta).
$$

This process is applied recursively at each child node until a 
stopping condition is met.

+ Stopping Criteria: 
  The algorithm stops when the maximum tree depth is reached or when
  the node sample size falls below a preset threshold.
+ Pruning: 
  Reduce the complexity of the final tree by removing
  branches that add little predictive value. This reduces overfitting
  and improves the generalization accuracy of the model.

### Search Space for Possible Splits

At each node in the decision tree, the search space for possible splits 
comprises all features in the dataset and potential thresholds derived 
from the values of each feature. For a given feature, the algorithm 
considers each unique value in the current node's subset as a possible 
split point. The potential thresholds are typically set as midpoints 
between consecutive unique values, ensuring the data is partitioned 
effectively.

Formally, let the feature set be $\{X_1, X_2, \ldots, X_p\}$, where 
$p$ is the total number of features, and let the unique values of 
feature $X_j$ at node $m$ be denoted by 
$\{v_{j,1}, v_{j,2}, \ldots, v_{j,k_j}\}$. The search space at node
$m$ includes:


- Feature candidates: $\{X_1, X_2, \ldots, X_p\}$.
- Threshold candidates for $X_j$: 
  $$
  \left\{ \frac{v_{j,i} + v_{j,i+1}}{2} \mid 1 \leq i < k_j \right\}.
  $$

The search space therefore encompasses all combinations of features and 
their respective thresholds. While the complexity of this search can be 
substantial, particularly for high-dimensional data or features with 
numerous unique values, efficient algorithms use sorting and single-pass 
scanning techniques to mitigate the computational cost.


### Metrics

#### Classification
In decision tree classification, several criteria can be used to
measure the quality of a split at each node. These criteria are based
on how "pure" the resulting nodes are after the split. A pure node
contains samples that predominantly belong to a single class. The goal
is to minimize impurity, leading to nodes that are as homogeneous as
possible.

+ Gini Index: The Gini index measures the impurity of a node by
  calculating the probability of randomly choosing two different
  classes. A perfect split (all instances belong to one class) has a
  Gini index of 0. At node $m$, the Gini index is
  $$
  H(Q_m) = \sum_{k=1}^{K} p_{mk} (1 - p_{mk}),
  $$
  where $p_{mk}$ is the proportion of samples of class $k$ at node $m$;
  and$K$ is the total number of classes
  The Gini index is often preferred for its speed and simplicity, and
  itâ€™s used by default in many implementations of decision trees,
  including `sklearn`.

+ Entropy (Information Gain): Entropy is another measure of impurity,
  derived from information theory. It quantifies the "disorder" of the
  data at a node. Lower entropy means higher purity. At node $m$, it
  is defined as
  $$
  H(Q_m) = - \sum_{k=1}^{K} p_{mk} \log p_{mk}
  $$
  Entropy is commonly used in decision tree algorithms like ID3 and
  C4.5. The choice between Gini and entropy often depends on specific
  use cases, but both perform similarly in practice.
  
+ Misclassification Error: Misclassification error focuses solely on
  the most frequent class in the node. It measures the proportion of
  samples that do not belong to the majority class. Although less
  sensitive than Gini and entropy, it can be useful for classification
  when simplicity is preferred. At node $m$, it is defined as
  $$
  H(Q_m) = 1 - \max_k p_{mk},
  $$
  where $\max_k p_{mk}$ is the largest proportion of samples belonging
  to any class $k$.

#### Regression Criteria

In decision tree regression, different criteria are used to assess the
quality of a split. The goal is to minimize the spread or variance of
the target variable within each node.

+ Mean Squared Error (MSE): Mean squared error is the most common
  criterion used in regression trees. It measures the average squared
  difference between the actual values and the predicted values (mean
  of the target in the node). The smaller the MSE, the better the
  fit. At node $m$, it is 
  $$
  H(Q_m) = \frac{1}{n_m} \sum_{i=1}^{n_m} (y_i - \bar{y}_m)^2,
  $$
  where
    - $y_i$ is the actual value for sample $i$;
    - $\bar{y}_m$ is the mean value of the target at node $m$;
    - $n_m$ is the number of samples at node $m$.

  MSE works well when the target is continuous and normally distributed.

+ Half Poisson Deviance (for count targets): When dealing with count
  data, the Poisson deviance is used to model the variance in the
  number of occurrences of an event. It is well-suited for target
  variables representing counts (e.g., number of occurrences of an
  event). At node $m$, it is
  $$
  H(Q_m) = \sum_{i=1}^{n_m} \left( y_i \log\left(\frac{y_i}{\hat{y}_i}\right) - (y_i - \hat{y}_i) \right),
  $$
  where $\hat{y}_i$ is the predicted count. This criterion is
  especially useful when the target variable represents discrete
  counts, such as predicting the number of occurrences of an event.

+ Mean Absolute Error (MAE): Mean absolute error is another criterion
  that minimizes the absolute differences between actual and predicted
  values. While it is more robust to outliers than MSE, it is slower
  computationally due to the lack of a closed-form solution for
  minimization. At node $m$, it is
  $$
  H(Q_m) = \frac{1}{n_m} \sum_{i=1}^{n_m} |y_i - \bar{y}_m|.
  $$
  MAE is useful when you want to minimize large deviations and can be
  more robust in cases where outliers are present in the data.

#### Summary

In decision trees, the choice of splitting criterion depends on the
type of task (classification or regression) and the nature of the
data. For classification tasks, the Gini index and entropy are the
most commonly used, with Gini offering simplicity and speed, and
entropy providing a more theoretically grounded
approach. Misclassification error can be used for simpler cases. For
regression tasks, MSE is the most popular choice, but Poisson deviance
and MAE are useful for specific use cases such as count data and
robust models, respectively.


## Gradient-Boosted Models

Gradient boosting is a powerful ensemble technique in machine learning
that combines multiple weak learners into a strong predictive
model. Unlike bagging methods, which train models independently,
gradient boosting fits models sequentially, with each new model
correcting errors made by the previous ensemble
[@friedman2001greedy]. While decision trees are commonly used as weak
learners, gradient boosting can be generalized to other base
models. This iterative method optimizes a specified loss function by
repeatedly adding models designed to reduce residual errors.


### Introduction

Gradient boosting builds on the general concept of boosting, aiming to
construct a strong predictor from an ensemble of sequentially trained
weak learners. The weak learners are often shallow decision trees
(stumps), linear models, or generalized additive models
[@hastie2009elements]. Each iteration adds a new learner focusing
primarily on the data points poorly predicted by the existing
ensemble, thereby progressively enhancing predictive accuracy.


Gradient boosting's effectiveness stems from:

- Error Correction: Each iteration specifically targets previous
  errors, refining predictive accuracy.
- Weighted Learning: Iteratively focuses more heavily on
  difficult-to-predict data points.
- Flexibility: Capable of handling diverse loss functions and various
  types of predictive tasks.


The effectiveness of gradient-boosted models has made them popular
across diverse tasks, including classification, regression, and
ranking. Gradient boosting forms the foundation for algorithms such as
XGBoost [@chen2016xgboost], LightGBM [@ke2017lightgbm], and CatBoost
[@prokhorenkova2018catboost], known for their high performance and
scalability.


### Gradient Boosting Process

Gradient boosting builds an ensemble by iteratively minimizing the
residual errors from previous models. This iterative approach
optimizes a loss function, $L(y, F(x))$, where $y$ represents the
observed target variable and $F(x)$ the model's prediction for a
given feature vector $x$.


Key concepts:

- Loss Function: Guides model optimization, such as squared error for
  regression or logistic loss for classification.
- Learning Rate: Controls incremental updates, balancing training
  speed and generalization.
- Regularization: Reduces overfitting through tree depth limitation,
  subsampling, and L1/L2 penalties.

#### Model Iteration

The gradient boosting algorithm proceeds as follows:

1. Initialization:
   Define a base model $F_0(x)$, typically the mean of the target
   variable for regression or the log-odds for classification.

2. Iterative Boosting:
   At each iteration $m$:
   - Compute pseudo-residuals representing the negative gradient of
     the loss function at the current predictions. For each
     observation $i$:
   $$
   r_i^{(m)} = -\left.\frac{\partial L(y_i, F(x_i))}{\partial F(x_i)}\right|_{F(x)=F_{m-1}(x)},
   $$
   where $x_i$ and $y_i$ denote the feature vector and observed value
     for the $i$-th observation, respectively.

   - Fit a new weak learner $h_m(x)$ to these residuals.
   - Update the model:
   $$
   F_m(x) = F_{m-1}(x) + \eta \, h_m(x),
   $$
   where $\eta$ is a small positive learning rate (e.g., 0.01â€“0.1),
   controlling incremental improvement and reducing overfitting.

3. Final Model: After $M$ iterations, the ensemble model is:
  $$
  F_M(x) = F_0(x) + \sum_{m=1}^M \eta \, h_m(x).
  $$


Stochastic gradient boosting is a variant that enhances gradient
boosting by introducing
randomness through subsampling at each iteration, selecting a random
fraction of data points (typically 50%â€“80%) to fit the model
[@friedman2002stochastic]. This randomness helps reduce correlation
among trees, improve model robustness, and reduce the risk of
overfitting.


### Demonstration

Here's a practical example using `scikit-learn` to demonstrate
gradient boosting on the California housing dataset. First, import
necessary libraries and load the data:

```{python}
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load data
housing = fetch_california_housing(as_frame=True)
X, y = housing.data, housing.target
```

Next, split the dataset into training and testing sets:

```{python}
# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=20250407
)
```

Then, set up and train a stochastic gradient boosting model:

```{python}
# Gradient Boosting Model with stochastic subsampling
gbm = GradientBoostingRegressor(
    n_estimators=200,
    learning_rate=0.1,
    max_depth=3,
    subsample=0.7,  # stochastic gradient boosting
    random_state=20250408
)

gbm.fit(X_train, y_train)
```

Finally, make predictions and evaluate the model performance:

```{python}
# Predictions
y_pred = gbm.predict(X_test)

# Evaluate
mse = mean_squared_error(y_test, y_pred)
print(f"Test MSE: {mse:.4f}")
```

### XGBoost: Extreme Gradient Boosting

XGBoost is a scalable and 
efficient implementation of gradient-boosted decision trees 
[@chen2016xgboost]. It has become one of the most widely used machine 
learning methods for structured data due to its high predictive 
performance, regularization capabilities, and speed. XGBoost builds 
an ensemble of decision trees in a stage-wise fashion, minimizing a 
regularized objective that balances training loss and model complexity.


The core idea of XGBoost is to fit each new tree to the *gradient* of 
the loss function with respect to the modelâ€™s predictions. Unlike 
traditional boosting algorithms like AdaBoost, which use only 
first-order gradients, XGBoost optionally uses second-order derivatives 
(Hessians), enabling better convergence and stability 
[@friedman2001greedy].


XGBoost is widely used in data science competitions and real-world 
applications. It supports regularization (L1 and L2), handles missing 
values internally, and is designed for distributed computing.


XGBoost builds upon the same foundational idea as gradient boosted 
machinesâ€”sequentially adding trees to improve the predictive modelâ€”
but introduces a number of enhancements:

| Aspect               | Traditional GBM                            | XGBoost                        |
|----------------------|---------------------------------------------|--------------------------------|
| Implementation       | Basic gradient boosting                    | Optimized, regularized boosting |
| Regularization       | Shrinkage only                             | L1 and L2 regularization        |
| Loss Optimization    | First-order gradients                      | First- and second-order         |
| Missing Data         | Requires manual imputation                 | Handled automatically           |
| Tree Construction    | Depth-wise                                 | Level-wise (faster)             |
| Parallelization      | Limited                                    | Built-in                        |
| Sparsity Handling    | No                                          | Yes                             |
| Objective Functions  | Few options                                | Custom supported                |
| Cross-validation     | External via `GridSearchCV`                | Built-in `xgb.cv`               |

XGBoost is therefore more suitable for large-scale problems and provides 
better generalization performance in many practical tasks.


{{< include _variable_importance.qmd >}}

{{< include _shap.qmd >}}

{{< include _svm.qmd >}}

<!-- {{< include _naivebayes.qmd >}} -->

<!-- {{< include _smote.qmd >}} -->
